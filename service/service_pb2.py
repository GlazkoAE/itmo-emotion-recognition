# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: service.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\rservice.proto\";\n\x0bsourceImage\x12\r\n\x05image\x18\x01 \x01(\x0c\x12\r\n\x05width\x18\x02 \x01(\x05\x12\x0e\n\x06height\x18\x03 \x01(\x05\";\n\x16processedAndPrediction\x12\r\n\x05image\x18\x01 \x01(\x0c\x12\x12\n\nprediction\x18\x02 \x01(\t2F\n\x0eRequestHandler\x12\x34\n\tGetEncode\x12\x0c.sourceImage\x1a\x17.processedAndPrediction\"\x00\x62\x06proto3')



_SOURCEIMAGE = DESCRIPTOR.message_types_by_name['sourceImage']
_PROCESSEDANDPREDICTION = DESCRIPTOR.message_types_by_name['processedAndPrediction']
sourceImage = _reflection.GeneratedProtocolMessageType('sourceImage', (_message.Message,), {
  'DESCRIPTOR' : _SOURCEIMAGE,
  '__module__' : 'service_pb2'
  # @@protoc_insertion_point(class_scope:sourceImage)
  })
_sym_db.RegisterMessage(sourceImage)

processedAndPrediction = _reflection.GeneratedProtocolMessageType('processedAndPrediction', (_message.Message,), {
  'DESCRIPTOR' : _PROCESSEDANDPREDICTION,
  '__module__' : 'service_pb2'
  # @@protoc_insertion_point(class_scope:processedAndPrediction)
  })
_sym_db.RegisterMessage(processedAndPrediction)

_REQUESTHANDLER = DESCRIPTOR.services_by_name['RequestHandler']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _SOURCEIMAGE._serialized_start=17
  _SOURCEIMAGE._serialized_end=76
  _PROCESSEDANDPREDICTION._serialized_start=78
  _PROCESSEDANDPREDICTION._serialized_end=137
  _REQUESTHANDLER._serialized_start=139
  _REQUESTHANDLER._serialized_end=209
# @@protoc_insertion_point(module_scope)
